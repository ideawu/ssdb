# encoding=utf-8
# Generated by cpy
# 2015-04-20 14:38:56.338378
import os, sys
from sys import stdin, stdout

import socket
class SSDB_Response(object):
	
	def __init__(this, code='', data_or_message=None):

		this.code = code
		this.data = None
		this.message = None
		if code=='ok':	
			this.data = data_or_message
		else:
			if isinstance(data_or_message, list):	
				if len(data_or_message)>0:				
					this.message = data_or_message[0]
			else:	
				this.message = data_or_message

	def __repr__(this):
		return '{} {} {}'.format(this.code, this.message, this.data)

	def ok(this):
		return this.code=='ok'

	def not_found(this):
		return this.code=='not_found'


class SSDB(object):
	
	def __init__(this, host, port):
		this.recv_buf = ''
		this._closed = False
		this.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		this.sock.connect((host, port,))
		this.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)

	def close(this):
		if not (this._closed):
			this.sock.close()
			this._closed = True

	def closed(this):
		return this._closed

	def request(this, cmd, params=[]):
		params = ([cmd] + params)
		this.send(params)
		resp = this.recv()
		if resp==None:
			return SSDB_Response('error', 'Unknown error')
		if len(resp)==0:
			return SSDB_Response('disconnected', 'Connection closed')

		# {{{ switch: cmd
		_continue_1 = False
		while True:
			if cmd in ['ping','qset','set','zset','hset','qpush','qpush_front','qpush_back','del','zdel',
			'hdel','multi_set','multi_del','multi_hset','multi_hdel','multi_zset','multi_zdel']:
				if resp[0]=='ok':
					if len(resp)>1:
						return SSDB_Response(resp[0], int(resp[1]))
					else:
						return SSDB_Response(resp[0], 1)
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['substr','get','getset','hget','qfront','qback','qget']:
				if resp[0]=='ok':
					if len(resp)==2:
						return SSDB_Response('ok', resp[1])
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['qpop','qpop_front','qpop_back']:
				if resp[0]=='ok':
					size = 1
					try:
						size = int(params[2])
					except Exception , e:
						print e
					if size==1:
						if len(resp)==2:
							return SSDB_Response('ok', resp[1])
						else:
							return SSDB_Response('server_error', 'Invalid response')
					else:
						return SSDB_Response('ok', resp[1 : ])
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['dbsize','getbit','setbit','countbit','bitcount','strlen','ttl','expire','setnx','incr','decr','zincr',
			'zdecr','hincr','hdecr','hsize','zsize','qsize','zget','zrank','zrrank','zsum','zcount','zavg','zremrangebyrank',
			'zremrangebyscore','hclear','zclear','qclear','qpush','qpush_front','qpush_back','qtrim_front','qtrim_back']:
			
				if resp[0]=='ok':
					if len(resp)==2:			
						try:
							if cmd=='zavg':		
								val = float(resp[1])
							else:		
								val = int(resp[1])
							return SSDB_Response('ok', val)
						except Exception , e:
							return SSDB_Response('server_error', 'Invalid response')
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['keys','rkeys','zkeys','zrkeys','hkeys','hrkeys','list','hlist','hrlist','zlist','zrlist']:
				return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['scan','rscan','hgetall','hscan','hrscan']:
				if resp[0]=='ok':
					if len(resp) % 2==1:				
						data = {'index': [],'items': {},}
						i = 1
						while i<len(resp):
							k = resp[i]
							v = resp[(i + 1)]
							data['index'].append(k)
							data['items'][k] = v
							i += 2
						return SSDB_Response('ok', data)
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['zscan','zrscan','zrange','zrrange','zpop_front','zpop_back']:
				if resp[0]=='ok':
					if len(resp) % 2==1:
						data = {'index': [],'items': {},}
						i = 1
						while i<len(resp):
							k = resp[i]
							v = resp[(i + 1)]
							try:		
								v = int(v)
							except Exception , e:		
								v = - (1)
							data['index'].append(k)
							data['items'][k] = v
							i += 2
						return SSDB_Response('ok', data)
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['auth','exists','hexists','zexists']:
				if resp[0]=='ok':
					data = False
					if len(resp)>=2:
						if resp[1]=='1':
							data = True
					return SSDB_Response(resp[0], data)
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['multi_exists','multi_hexists','multi_zexists']:
				if resp[0]=='ok':
					data = {}
					if len(resp) % 2 == 1:
						i = 1
						while i<len(resp):
							k = resp[i]
							if resp[(i + 1)]=='1':
								v = True
							else:
								v = False
							data[k] = v
							i += 2
					return SSDB_Response('ok', data)
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['multi_get','multi_hget']:
				if resp[0]=='ok':
					if len(resp) % 2==1:
						data = {}
						i = 1
						while i<len(resp):
							k = resp[i]
							v = resp[(i + 1)]
							data[k] = v
							i += 2
						return SSDB_Response('ok', data)
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			if cmd in ['multi_hsize','multi_zsize','multi_zget']:
				if resp[0]=='ok':
					if len(resp) % 2==1:
						
						data = {}
						i = 1
						while i<len(resp):
							k = resp[i]
							v = int(resp[(i + 1)])
							data[k] = v
							i += 2
						return SSDB_Response('ok', data)
					else:
						return SSDB_Response('server_error', 'Invalid response')
				else:
					return SSDB_Response(resp[0], resp[1 : ])
				break
			### default
			return SSDB_Response(resp[0], resp[1 : ])
			break
			if _continue_1:
				continue
		# }}} switch
		return SSDB_Response('error', 'Unknown error')

	def send(this, data):
		
		ps = []

		_cpy_r_0 = _cpy_l_1 = data
		if type(_cpy_r_0).__name__ == 'dict': _cpy_b_3=True; _cpy_l_1=_cpy_r_0.iterkeys()
		else: _cpy_b_3=False;
		for _cpy_k_2 in _cpy_l_1:
			if _cpy_b_3: p=_cpy_r_0[_cpy_k_2]
			else: p=_cpy_k_2
			
			p = str(p)
			ps.append(str(len(p)))
			ps.append(p)
		nl = '\n'
		s = (nl.join(ps) + '\n\n')
		try:
			while True:			
				ret = this.sock.send(s)
				if ret==0:
					return - (1)
				s = s[ret : ]
				if len(s)==0:
					break
		except socket.error , e:
			return - (1)
		return ret

	def net_read(this):
		try:
			data = this.sock.recv(1024 * 8)
		except Exception, e:
			this.close()
			return 0
		this.recv_buf += data
		return len(data)

	def recv(this):
		while True:
			ret = this.parse()
			if ret == None:
				if this.net_read() == 0:
					return []
			else:
				return ret

	def parse(this):
		ret = []
		spos = 0
		epos = 0
		while True:
			spos = epos
			epos = this.recv_buf.find('\n', spos)
			if epos==- (1):
				break
			epos += 1
			line = this.recv_buf[spos : epos]
			spos = epos
			if line.strip()=='':
				if len(ret)==0:
					continue
				else:
					this.recv_buf = this.recv_buf[spos : ]
					return ret
			try:
				num = int(line)
			except Exception , e:
				return []
			epos = (spos + num)
			if epos>len(this.recv_buf):
				break
			data = this.recv_buf[spos : epos]
			ret.append(data)
			spos = epos
			epos = this.recv_buf.find('\n', spos)
			if epos==- (1):
				break
			epos += 1
		return None